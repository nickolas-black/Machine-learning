# -*- coding: utf-8 -*-
"""01_ML_titanic_simple.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h_m0oOaBiIXHsPsXkfy0U26N7kvGmz-Y

Пояснения по некоторым полям:
- PassengerId — идентификатор пассажира
- Survival — поле в котором указано спасся человек (1) или нет (0)
- Pclass — содержит социально-экономический статус:
-- высокий
-- средний
-- низкий
- Name — имя пассажира
- Sex — пол пассажира
- Age — возраст
- SibSp — содержит информацию о количестве родственников 2-го порядка (муж, жена, братья, сетры)
- Parch — содержит информацию о количестве родственников на борту 1-го порядка (мать, отец, дети)
- Ticket — номер билета
- Fare — цена билета
- Cabin — каюта
- Embarked — порт посадки
-- C — Cherbourg
-- Q — Queenstown
-- S — Southampton
"""

import pandas as pd
data = pd.read_csv('titanic_train.csv')

data.head(10)

data.PassengerId[data.Cabin.notnull()].count()

data.PassengerId[data.Age.notnull()].count()

"""### Заполнение пропусков"""

data.isnull().sum()

#data.Age = data.Age.median()
data.Age = data.Age.mean()



data["EmbarkedF"] = data["Embarked"].fillna("U")

data[data.Embarked.isnull()]

MaxPassEmbarked = data.groupby('Embarked').count()['PassengerId']

MaxPassEmbarked

data.Embarked[data.Embarked.isnull()] = MaxPassEmbarked[MaxPassEmbarked == MaxPassEmbarked.max()].index[0]

data.PassengerId[data.Fare.isnull()]

data = data.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)

data.head(10)

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
dicts = {}

label.fit(data.Sex.drop_duplicates()) #задаем список значений для кодирования
dicts['Sex'] = list(label.classes_)
data.Sex = label.transform(data.Sex) #заменяем значения из списка кодами закодированных элементов 

label.fit(data.Embarked.drop_duplicates())
dicts['Embarked'] = list(label.classes_)
data.Embarked = label.transform(data.Embarked)

ytrain = data.Survived
Xtrain = data.drop(['Survived'],axis=1)

Xtrain.head()

"""### Проделываем все тоже самое с данными test"""

test = pd.read_csv('titanic_test.csv')
test.Age[test.Age.isnull()] = test.Age.mean()
test.Fare[test.Fare.isnull()] = test.Fare.median() #заполняем пустые значения средней ценой билета
MaxPassEmbarked = test.groupby('Embarked').count()['PassengerId']
test.Embarked[test.Embarked.isnull()] = MaxPassEmbarked[MaxPassEmbarked == MaxPassEmbarked.max()].index[0]
result = pd.DataFrame(test.PassengerId)
test = test.drop(['Name','Ticket','Cabin','PassengerId'],axis=1)

label.fit(dicts['Sex'])
test.Sex = label.transform(test.Sex)

label.fit(dicts['Embarked'])
test.Embarked = label.transform(test.Embarked)

test.head()

from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.neighbors import KNeighborsClassifier

target = data.Survived
train = data.drop(['Survived'], axis=1) #из исходных данных убираем Id пассажира и флаг спасся он или нет
kfold = 5 #количество подвыборок для валидации

Xtrain, ytrain, Xtest, ytest = train_test_split(train, target, test_size=0.25)

model_knc = KNeighborsClassifier(n_neighbors = 18) #в параметре передаем кол-во соседей

scores = cross_val_score(model_knc, Xtrain, ytrain, cv = kfold)
print(scores.mean())