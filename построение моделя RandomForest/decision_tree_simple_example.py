# -*- coding: utf-8 -*-
"""Decision Tree Simple Example.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gU2Dy91ZW3nlWZFjKXgns2WVGMUQhXUe

### Decision Tree example
"""

import numpy as np
import matplotlib.pyplot as plt

np.seed = 7


# первый класс
train_data = np.random.normal(size=(100, 2))
train_labels = np.zeros(100)

# добавляем второй класс
train_data = np.r_[train_data, np.random.normal(size=(100, 2), loc=2)]
train_labels = np.r_[train_labels, np.ones(100)]

train_labels

plt.rcParams['figure.figsize'] = (10,8)
plt.scatter(train_data[:, 0], train_data[:, 1], c=train_labels, s=100, 
cmap='autumn', edgecolors='black', linewidth=1.5);
plt.plot(range(-2,5), range(4,-3,-1));

from sklearn.tree import DecisionTreeClassifier

# Напишем вспомогательную функцию, которая будет возвращать решетку для дальнейшей визуализации.
def get_grid(data):
    x_min, x_max = data[:, 0].min() - 1, data[:, 0].max() + 1
    y_min, y_max = data[:, 1].min() - 1, data[:, 1].max() + 1
    return np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))

# параметр min_samples_leaf указывает, при каком минимальном количестве
# элементов в узле он будет дальше разделяться
clf_tree = DecisionTreeClassifier(criterion='entropy', max_depth=4, random_state=42)

# обучаем дерево
clf_tree.fit(train_data, train_labels)

# немного кода для отображения разделяющей поверхности
xx, yy = get_grid(train_data)
predicted = clf_tree.predict(np.c_[xx.ravel(), yy.ravel()]).reshape(xx.shape)
plt.pcolormesh(xx, yy, predicted, cmap='autumn')
plt.scatter(train_data[:, 0], train_data[:, 1], c=train_labels, s=100, 
cmap='autumn', edgecolors='black', linewidth=1.5);

# используем .dot формат для визуализации дерева
from sklearn.tree import export_graphviz
export_graphviz(clf_tree, feature_names=['x1', 'x2'], 
out_file='small_tree1.dot', filled=True)
# для этого понадобится библиотека pydot (pip install pydot)
#!brew install graphviz ###for mac
!dot -Tpng 'small_tree1.dot' -o 'small_tree1.png'

!dot -Tpng 'small_tree1.dot' -o 'small_tree1.png'

from IPython.display import Image
img = 'small_tree1.png'
Image(url=img) #, width=100, height=100

"""### Not categorical features"""

import pandas as pd
data = pd.DataFrame({'Возраст': [17,64,18,20,38,49,55,25,29,31,33], 
             'Невозврат кредита': [1,0,1,0,1,0,0,1,1,0,1]})

data.sort_values('Возраст')

from sklearn.tree import DecisionTreeClassifier
age_tree = DecisionTreeClassifier()
age_tree.fit(data['Возраст'].values.reshape(-1, 1), data['Невозврат кредита'].values)

from IPython.display import Image
from sklearn.tree import export_graphviz

export_graphviz(age_tree, feature_names=['Возраст'], 
                out_file='not_small_tree.dot', filled=True)
!dot -Tpng 'not_small_tree.dot' -o 'not_small_tree.png'
Image('not_small_tree.png')

data2 = pd.DataFrame({'Возраст':  [17,64,18,20,38,49,55,25,29,31,33], 
                      'Зарплата': [25,80,22,36,37,59,74,70,33,102,88], 
             'Невозврат кредита': [1,0,1,0,1,0,0,1,1,0,1]})

data2.sort_values('Возраст')

data2.sort_values('Зарплата')

age_sal_tree = DecisionTreeClassifier( max_depth=3,random_state=17)
age_sal_tree.fit(data2[['Возраст', 'Зарплата']].values, data2['Невозврат кредита'].values);

export_graphviz(age_sal_tree, feature_names=['Возраст', 'Зарплата'], 
                out_file='big_tree.dot', filled=True)
!dot -Tpng 'big_tree.dot' -o 'big_tree.png'
Image('big_tree.png')

