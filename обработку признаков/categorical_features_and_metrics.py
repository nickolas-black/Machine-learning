# -*- coding: utf-8 -*-
"""Categorical_features and Metrics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rJxvDUweiJ1j2QcgWAHiDhP3O4NfVueT

### Обработку признаков датасета Titanic (https://www.kaggle.com/c/titanic).
 Использовать как категориальные, так и числовые признаки. Построить модель kNN и Байесовские модели. Определить оптимальные параметры моделей. 
По возможности сделать Submit в соревнование на Kaggle.

## Работа с категориальными признаками на примере датасета Titanic
"""

from IPython.display import Image
Image(url= "https://static1.squarespace.com/static/5006453fe4b09ef2252ba068/5095eabce4b06cb305058603/5095eabce4b02d37bef4c24c/1352002236895/100_anniversary_titanic_sinking_by_esai8mellows-d4xbme8.jpg")

import pandas as pd
import numpy as np

train = pd.read_csv("titanic_train.csv")
test = pd.read_csv("titanic_test.csv")

print("Train Shape:",train.shape)
print("Test Shape:",test.shape)

train.info()

train.head(10)

train.isnull().sum()

"""#### Label encoder Pandas"""

train['Embarked'].value_counts()

embarked_mapping = {'S':0,'C':1,'Q':2}

train['Embarked_map'] = train['Embarked'].map(embarked_mapping)

train['Embarked_map'].value_counts()

"""#### Label encoder Scikit-learn"""

train['Embarked'].drop_duplicates()

def function(x):
    return str(x)
train['Embarked'] = train['Embarked'].apply(lambda x: str(x))

train['Embarked'].drop_duplicates()

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
dicts = {}

label.fit(train.Embarked.drop_duplicates())

dicts['Embarked'] = list(label.classes_)

train['Embarked_encoder'] = label.transform(train['Embarked']) # train['Embarked'] = train.Embarked

arr = ['Embarked_map', 'Embarked_encoder']
train[arr]

"""#### One-hot encoding"""

Embarked_dummies = pd.get_dummies(train["Embarked"], prefix="xxxx", dummy_na=False)
#dummy_na - Add a column to indicate NaNs, if False NaNs are ignored.

Embarked_dummies.head()

train = pd.concat([train, Embarked_dummies], axis=1)

train.head()

"""#### Выделить признаки определенного типа"""

list(train.select_dtypes(include=['object']).columns)

"""## Метрики бинарной классификации"""

from sklearn.metrics import accuracy_score, f1_score, recall_score, roc_curve, precision_score, auc, roc_auc_score
import matplotlib.pyplot as plt
y_true = np.array([1,0,1,1,0,0,0,1,0,1])
y_pred = np.array([0,0,1,1,1,0,0,0,1,1])

def value_of_metrics(y_true, y_pred):
    print('Accuracy: ', accuracy_score(y_true, y_pred))
    print('Recall: ', recall_score(y_true, y_pred))
    print('Precision: ', precision_score(y_true, y_pred))  
    print('F1: ', f1_score(y_true, y_pred))
    print('Roc_AUC: ', roc_auc_score(y_true, y_pred))
    
    fpr, tpr, threshold = roc_curve(y_true, y_pred)
    roc_auc = auc(fpr, tpr)
    plt.title('My DataSet')
    plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)
    plt.legend(loc = 'lower right')
    plt.plot([0, 1], [0, 1],'r--')
    plt.xlim([0, 1])
    plt.ylim([0, 1])
    plt.ylabel('True Positive Rate')
    plt.xlabel('False Positive Rate')
    plt.show()

value_of_metrics(y_true, y_pred)

"""### ROC-AUC"""

roc_auc_score(y_true, y_pred)

# calculate the fpr and tpr for all thresholds of the classification
fpr, tpr, threshold = roc_curve(y_true, y_pred)
roc_auc = auc(fpr, tpr)


plt.title('Receiver Operating Characteristic')
plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)
plt.legend(loc = 'lower right')
plt.plot([0, 1], [0, 1],'r--')
plt.xlim([0, 1])
plt.ylim([0, 1])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()

y_true = np.array([0, 0, 1, 1])
y_pred = np.array([0.1, 0.4, 0.35, 0.8])

roc_auc_score(y_true, y_pred)