# -*- coding: utf-8 -*-
"""MLHWK9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QNV3WCbGxyLHv3aCpdu03enXjRTuKfwa

### Выполнить задачу text summarization для своего набора статей на английском языке.
"""

import numpy as np
import pandas as pd
import nltk
from nltk.tokenize import sent_tokenize
nltk.download('punkt')
import re

from google.colab import files
files.upload()

df = pd.read_excel('aii.xlsx')



df.head()

len(df)

# разбиваем текст статьи в предложения
sentences = []
for s in df['article_text']:
    sentences.append(sent_tokenize(s))

sentences[0]

sentences = [y for x in sentences for y in x]

# Удаляем все лишнее, приводим к нижнему регистру
clean_sentences = pd.Series(sentences).str.replace("[^a-zA-Z]", " ")
clean_sentences = [s.lower() for s in clean_sentences]

clean_sentences[0]

nltk.download('stopwords')

from nltk.corpus import stopwords
stop_words = stopwords.words('english')

# функция удаления "стоповых" слов
def remove_stopwords(sen):
    sen_new = " ".join([i for i in sen if i not in stop_words])
    return sen_new

# удаляем "стоповые" слова из предложений
clean_sentences = [remove_stopwords(r.split()) for r in clean_sentences]

# Extract word vectors
word_embeddings = {}

f = open('/content/drive/My Drive/ML/HW9/glove.6B.100d.txt', encoding='utf-8')

for line in f:
    values = line.split()
    word = values[0]
    coefs = np.asarray(values[1:], dtype='float32')
    word_embeddings[word] = coefs
f.close()

df.head()

word_embeddings['glasses']

sentence_vectors = []


for i in clean_sentences:
    
    if len(i) != 0:
        v = sum([word_embeddings.get(w, np.zeros((100,))) for w in i.split()])/(len(i.split())+0.001)
    else:
        v = np.zeros((100,))
    sentence_vectors.append(v)

len(sentence_vectors)

# строим матрицу "похожести"
sim_mat = np.zeros([len(sentences), len(sentences)])

from sklearn.metrics.pairwise import cosine_similarity

for i in range(len(sentences)):
    for j in range(len(sentences)):
        if i != j:
            sim_mat[i][j] = cosine_similarity(sentence_vectors[i].reshape(1,100), sentence_vectors[j].reshape(1,100))[0,0]

import networkx as nx
nx_graph = nx.from_numpy_array(sim_mat)
scores = nx.pagerank(nx_graph)

ranked_sentences = sorted(((scores[i],s) for i,s in enumerate(sentences)), reverse=True)

len(ranked_sentences)

sn = 10
for i in range(sn):
    print(ranked_sentences[i][1])
    print('')

from gensim.summarization.summarizer import summarize

from gensim.summarization import keywords 
text = "They are able to better predict what people will want using this approach by understanding customer preferences and customer behavior more fully than a traditional human- and computer-based decision-making technology and algorithm"
kw = keywords(text)
kw